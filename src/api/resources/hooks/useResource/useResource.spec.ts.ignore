describe('useResource', () => {
  beforeEach(() => {
    vitest.restoreAllMocks()

    global.Date = vi
      .fn()
      .mockReturnValue(new Date(mockDate)) as unknown as DateConstructor

    mockDoc.mockImplementation((collection, id) => ({ collection, id }))
    mockOnSnapshot.mockReturnValue({})
    mockCollection.mockImplementation((db, name) => ({ name, db }))
    mockQuery.mockReturnValue(vitest.fn())
  })

  afterEach(() => {
    global.Date = RealDate
  })

  describe('getting', () => {
    it('with get should get the appropriate value', () => {
      const id = '1'

      const { getDatabaseValue } = mockDatabase({
        [id]: {
          name: 'scooby',
          count: 1,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
      })

      const { get } = useTestResourceAPI()

      expect(get(id)).resolves.toStrictEqual(getDatabaseValue(id))
    })

    it('with getList and no filters should get all the docs', () => {
      const { indexDatabaseValues } = mockDatabase({
        '1': {
          name: 'scooby',
          count: 1,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
        '2': {
          name: 'snacks',
          count: 5,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
      })

      const { getList } = useTestResourceAPI()

      expect(getList()).resolves.toStrictEqual(indexDatabaseValues())
    })

    it('with getList should appropriately filter the docs', async () => {
      const { indexDatabaseValues } = mockDatabase({
        '1': {
          name: 'scooby',
          count: 1,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
        '2': {
          name: 'snacks',
          count: 5,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
      })

      const { getList } = useTestResourceAPI()

      const expectedResult = indexDatabaseValues().filter(
        ({ count }) => count === 5
      )

      const list = await getList([where('count', '==', 5)])

      expect(list).toStrictEqual(expectedResult)
      expect(list).not.toStrictEqual(indexDatabaseValues())
    })
  })

  describe('syncing single', () => {
    describe('syncing', () => {
      it('should sync current call', () => {
        const id = '1'

        const { getDatabaseValue, updateDatabaseValue } = mockDatabase({
          [id]: {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { sync } = useTestResourceAPI()

        const instance = sync(id)

        // Ensures it initializes properly
        expect(instance.value).toStrictEqual(getDatabaseValue(id))

        updateDatabaseValue(id, { count: 10 })

        // Ensures it synced properly
        expect(instance.value).toStrictEqual(getDatabaseValue(id))
      })

      it('should also sync the provided ref', () => {
        const id = '1'

        const { getDatabaseValue, updateDatabaseValue } = mockDatabase({
          [id]: {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { sync } = useTestResourceAPI()

        const instanceRef = ref<Resource<TestProperties> | null>(null)

        sync(id, instanceRef)

        // Ensures it initializes properly
        expect(instanceRef.value).toStrictEqual(getDatabaseValue(id))

        updateDatabaseValue(id, { count: 10 })

        // Ensures it synced properly
        expect(instanceRef.value).toStrictEqual(getDatabaseValue(id))
      })
    })

    describe('desyncing', () => {
      it('should throw when reading form desynced value', () => {
        const testId = '1'

        const { getDatabaseValue, hasListener } = mockDatabase({
          [testId]: {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { sync, desync } = useTestResourceAPI()

        const instance = sync(testId)

        // Ensures it initializes properly
        expect(instance.value).toStrictEqual(getDatabaseValue(testId))
        expect(hasListener(testId)).toBeTruthy()

        desync()

        expect(() => instance.value).toThrow(desyncedReadErrorMessage)
        expect(hasListener(testId)).toBeFalsy()
      })

      it('should desync previous calls to sync', () => {
        const testId = '1'

        const { getDatabaseValue, hasListener } = mockDatabase({
          [testId]: {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { sync } = useTestResourceAPI()

        const instance = sync(testId)

        // Ensures it initializes properly
        expect(instance.value).toStrictEqual(getDatabaseValue(testId))
        expect(hasListener(testId)).toBeTruthy()

        sync(testId)

        expect(() => instance.value).toThrow(desyncedReadErrorMessage)
        expect(hasListener(testId)).toBeTruthy()
      })

      it('should handle desync when no synced resources like a champ', () => {
        const { desync } = useTestResourceAPI()

        expect(desync).not.toThrow()
      })
    })

    describe('writing', () => {
      it('should throw when writing to desynced', () => {
        const testId = '1'

        const { getDatabaseValue } = mockDatabase({
          [testId]: {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { sync, desync } = useTestResourceAPI()

        const instance = sync(testId)

        const oldValue = instance.value

        // Ensures it initializes properly
        expect(oldValue).toStrictEqual(getDatabaseValue(testId))

        desync()

        expect(
          () => (instance.value = { count: 10 } as Resource<TestProperties>)
        ).toThrow(desyncedWriteErrorMessage)

        // Ensures nothing changed
        expect(getDatabaseValue(testId)).toStrictEqual(oldValue)
      })

      it('should desync when writing null', () => {
        const testId = '1'

        const { getDatabaseValue } = mockDatabase({
          [testId]: {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { sync } = useTestResourceAPI()

        const instance = sync(testId)

        const oldValue = instance.value

        // Ensures it initializes properly
        expect(oldValue).toStrictEqual(getDatabaseValue(testId))

        instance.value = null

        expect(() => instance.value).toThrow(desyncedReadErrorMessage)
      })

      it('should update with valid data', () => {
        const testId = '1'

        const { getDatabaseValue } = mockDatabase({
          [testId]: {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { sync } = useTestResourceAPI()

        const instance = sync(testId)

        // Ensures it initializes properly
        expect(instance.value).toStrictEqual(getDatabaseValue(testId))

        instance.value!.count = 10

        expect(instance.value).toHaveProperty('count', 10)
        expect(instance.value).toStrictEqual(getDatabaseValue(testId))
      })
    })
  })

  describe('syncing list', () => {
    describe('syncing', () => {
      it('should sync to database content', () => {
        const { indexDatabaseValues, updateDatabaseValue } = mockDatabase({
          '1': {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
          '2': {
            name: 'snacks',
            count: 5,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { syncList } = useTestResourceAPI()

        const list = syncList()

        // Verifica se inicializa adequadamente
        expect(list.value).toStrictEqual(indexDatabaseValues())

        updateDatabaseValue('2', { count: 10 })

        expect(list.value).toStrictEqual(indexDatabaseValues())
      })

      it('should also sync the provided ref', () => {
        const { indexDatabaseValues, updateDatabaseValue } = mockDatabase({
          '1': {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
          '2': {
            name: 'snacks',
            count: 5,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { syncList } = useTestResourceAPI()

        const listRef = ref<Resource<TestProperties>[]>([])

        syncList([], listRef)

        // Verifica se inicializa adequadamente
        expect(listRef.value).toStrictEqual(indexDatabaseValues())

        updateDatabaseValue('2', { count: 10 })

        expect(listRef.value).toStrictEqual(indexDatabaseValues())
      })

      it('should filter list to match query and keep filter synced', () => {
        const { indexDatabaseValues } = mockDatabase({
          '1': {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
          '2': {
            name: 'snacks',
            count: 5,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { syncList } = useTestResourceAPI()

        const expectedResult = indexDatabaseValues().filter(
          ({ count }) => count === 5
        )

        const list = syncList([where('count', '==', 5)])

        expect(list.value).toStrictEqual(expectedResult)
        expect(list.value).not.toStrictEqual(indexDatabaseValues())
      })
    })

    describe('desyncing', () => {
      it('should throw when reading desynced list', () => {
        const { indexDatabaseValues, hasListListener } = mockDatabase({
          '1': {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
          '2': {
            name: 'snacks',
            count: 5,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { syncList, desyncList } = useTestResourceAPI()

        const list = syncList()

        // Verifica se inicializa adequadamente
        expect(list.value).toStrictEqual(indexDatabaseValues())
        expect(hasListListener()).toBeTruthy()

        desyncList()

        expect(() => list.value).toThrow(desyncedReadErrorMessage)
        expect(hasListListener()).toBeFalsy()
      })

      it('should call desyncList for previous calls', () => {
        const { indexDatabaseValues, hasListListener } = mockDatabase({
          '1': {
            name: 'scooby',
            count: 1,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
          '2': {
            name: 'snacks',
            count: 5,
            createdAt: new Date().toJSON(),
            modifiedAt: new Date().toJSON(),
          },
        })

        const { syncList } = useTestResourceAPI()

        const list = syncList()

        // Verifica se inicializa adequadamente
        expect(list.value).toStrictEqual(indexDatabaseValues())
        expect(hasListListener()).toBeTruthy()

        syncList()

        expect(() => list.value).toThrow(desyncedReadErrorMessage)
        expect(hasListListener()).toBeTruthy()
      })

      it('should handle desync when no synced lists like a champ', () => {
        const { desyncList } = useTestResourceAPI()

        expect(desyncList).not.toThrow()
      })
    })
  })


  it('should get the correct doc when getDoc is called', () => {
    const { getDoc, resourceCollection } = useTestResourceAPI()

    const id = 'scooby'

    expect(getDoc(id)).toStrictEqual(mockDoc(resourceCollection, id))
  })

  it('should provide the correct collection with resourceCollection', () => {
    const { resourceCollection } = useTestResourceAPI()

    expect(resourceCollection).toEqual(
      mockCollection('mockDb', 'test-resource')
    )
  })

  it('should unsubscribe everything on unmount', () => {
    let unmount = () => {}

    mockOnBeforeUnmount.mockImplementation((callback) => (unmount = callback))

    const instanceUid = '1'

    const { getDatabaseValue, updateDatabaseValue, indexDatabaseValues } =
      mockDatabase({
        [instanceUid]: {
          name: 'scooby',
          count: 1,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
        '2': {
          name: 'snacks',
          count: 5,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
      })

    const { sync, syncList } = useTestResourceAPI()

    const instance = sync(instanceUid)
    const list = syncList()

    const oldInstance = instance.value
    const oldList = list.value

    expect(instance.value).toStrictEqual(getDatabaseValue(instanceUid))
    expect(instance.value).toStrictEqual(oldInstance)
    expect(list.value).toStrictEqual(indexDatabaseValues())
    expect(list.value).toStrictEqual(oldList)

    unmount()

    updateDatabaseValue(instanceUid, { count: 50 })

    expect(() => instance.value).toThrow(desyncedReadErrorMessage)
    expect(() => list.value).toThrow(desyncedReadErrorMessage)
  })

  it('should, by default, extract all properties from document data', () => {
    const id = '1'

    const { getDatabaseValue, updateDatabaseValue } = mockDatabase({
      [id]: {
        name: 'scooby',
        count: 1,
        createdAt: new Date().toJSON(),
        modifiedAt: new Date().toJSON(),
      },
    })

    const { sync } = useResource<TestProperties>('test-resource')

    const instance = sync(id)

    // Ensures it initializes properly
    expect(instance.value).toStrictEqual(getDatabaseValue(id))

    updateDatabaseValue(id, { count: 10 })

    // Ensures it synced properly
    expect(instance.value).toStrictEqual(getDatabaseValue(id))
  })
})
