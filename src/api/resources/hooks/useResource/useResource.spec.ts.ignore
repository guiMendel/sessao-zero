describe('useResource', () => {
  beforeEach(() => {
    vitest.restoreAllMocks()

    global.Date = vi
      .fn()
      .mockReturnValue(new Date(mockDate)) as unknown as DateConstructor

    mockDoc.mockImplementation((collection, id) => ({ collection, id }))
    mockOnSnapshot.mockReturnValue({})
    mockCollection.mockImplementation((db, name) => ({ name, db }))
    mockQuery.mockReturnValue(vitest.fn())
  })

  afterEach(() => {
    global.Date = RealDate
  })



  it('should get the correct doc when getDoc is called', () => {
    const { getDoc, resourceCollection } = useTestResourceAPI()

    const id = 'scooby'

    expect(getDoc(id)).toStrictEqual(mockDoc(resourceCollection, id))
  })

  it('should provide the correct collection with resourceCollection', () => {
    const { resourceCollection } = useTestResourceAPI()

    expect(resourceCollection).toEqual(
      mockCollection('mockDb', 'test-resource')
    )
  })

  it('should unsubscribe everything on unmount', () => {
    let unmount = () => {}

    mockOnBeforeUnmount.mockImplementation((callback) => (unmount = callback))

    const instanceUid = '1'

    const { getDatabaseValue, updateDatabaseValue, indexDatabaseValues } =
      mockDatabase({
        [instanceUid]: {
          name: 'scooby',
          count: 1,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
        '2': {
          name: 'snacks',
          count: 5,
          createdAt: new Date().toJSON(),
          modifiedAt: new Date().toJSON(),
        },
      })

    const { sync, syncList } = useTestResourceAPI()

    const instance = sync(instanceUid)
    const list = syncList()

    const oldInstance = instance.value
    const oldList = list.value

    expect(instance.value).toStrictEqual(getDatabaseValue(instanceUid))
    expect(instance.value).toStrictEqual(oldInstance)
    expect(list.value).toStrictEqual(indexDatabaseValues())
    expect(list.value).toStrictEqual(oldList)

    unmount()

    updateDatabaseValue(instanceUid, { count: 50 })

    expect(() => instance.value).toThrow(desyncedReadErrorMessage)
    expect(() => list.value).toThrow(desyncedReadErrorMessage)
  })

  it('should, by default, extract all properties from document data', () => {
    const id = '1'

    const { getDatabaseValue, updateDatabaseValue } = mockDatabase({
      [id]: {
        name: 'scooby',
        count: 1,
        createdAt: new Date().toJSON(),
        modifiedAt: new Date().toJSON(),
      },
    })

    const { sync } = useResource<TestProperties>('test-resource')

    const instance = sync(id)

    // Ensures it initializes properly
    expect(instance.value).toStrictEqual(getDatabaseValue(id))

    updateDatabaseValue(id, { count: 10 })

    // Ensures it synced properly
    expect(instance.value).toStrictEqual(getDatabaseValue(id))
  })
})
